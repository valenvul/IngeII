plugins {
    id 'java'
    id 'jacoco'
}

group 'org.autotest'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    implementation 'com.github.randoop:randoop:4.3.2'
    implementation 'org.slf4j:slf4j-simple:2.0.7'
    implementation 'fr.inria.gforge.spoon:spoon-core:9.1.0'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
    }
}

task fixTestsImport() {
    group = "help"
    description = "Fixes the import statements in the tests files generated by Randoop so we can run tests using Junit 5." +
            "Also adds all that's needed to run the tests using MutationAnalysisRunner."

    doLast {
        fileTree(dir: 'src/test/java/org/autotest/generated', include: '**/*.java').each { file ->
            file.text = file.text.replace('import org.junit.Test;', 'import org.junit.jupiter.api.Test;')

        }
    }
}

task convertToMutationAnalysis() {
    group = "help"
    description = "Fixes the import statements in the tests files generated by Randoop so we can run tests using Junit 5." +
            "Also adds all that's needed to run the tests using MutationAnalysisRunner."

    doLast {
        fileTree(dir: 'src/test/java/org/autotest/generated', include: '**/*.java').each { file ->
            file.text = file.text.replace('import org.junit.Test;', 'import org.junit.jupiter.api.Test;')

            // add "import org.autotest.MutationAnalysisRunner;" to the imports
            file.text = file.text.replaceAll('package org.autotest.generated;',
                    'package org.autotest.generated;\nimport org.autotest.MutationAnalysisRunner;')

            // add " extends MutationAnalysisRunner " to the class declaration ("public class *")
            file.text = file.text.replaceAll('public class ([^ ]*)', 'public class $1 extends MutationAnalysisRunner')

            // add "override boolean useVerboseMode() { return false; }" method
            file.text = file.text.replace('MutationAnalysisRunner {',
                    'MutationAnalysisRunner {\n    @Override\n    protected boolean useVerboseMode() { return false; }')

            // change every "new org.autotest.StackAr(*)" with createStack(*)
            file.text = file.text.replaceAll('new org.autotest.StackAr\\(([^)]*)\\)', 'createStack($1)')

            // change every Stack variable declaration ("org.autotest.StackAr * =") with "org.autotest.Stack * ="
            file.text = file.text.replaceAll('org.autotest.StackAr ([^ ]*) =', 'org.autotest.Stack $1 =')
        }
    }
}


task cleanGeneratedTests() {
    group = "help"
    doLast {
        fileTree(dir: 'src/test/java/org/autotest/generated', include: '**/*.java').each { file ->
            file.delete()
        }
    }
}

task randoop(type: JavaExec, dependsOn: jar) {
    group = "verification"
    description = "Runs Randoop on the project's classes."

    main = "randoop.main.Main"
    classpath = sourceSets.main.runtimeClasspath

    args('gentests')
    args('--testclass', 'org.autotest.StackAr')
    args('--time-limit', '15') // seconds
    args('--testsperfile', '50')
    args('--junit-output-dir', 'src/test/java')
    args('--junit-package-name', 'org.autotest.generated')

    dependsOn cleanGeneratedTests
    finalizedBy fixTestsImport
}

task randoopWithMutationAnalysis(type: JavaExec, dependsOn: jar) {
    group = "verification"
    description = "Generate Randoop tests for mutation analysis"

    main = "randoop.main.Main"
    classpath = sourceSets.main.runtimeClasspath

    args('gentests')
    args('--testclass', 'org.autotest.StackAr')
    args('--time-limit', '60') // seconds
    args('--testsperfile', '50')
    args('--junit-output-dir', 'src/test/java')
    args('--junit-package-name', 'org.autotest.generated')

    dependsOn cleanGeneratedTests
    finalizedBy convertToMutationAnalysis
}
